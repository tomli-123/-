安装 angular cli
创建项目 ng new 项目名称 （跳过 npm安装 ng new angularDome --skip-install）
tips: npm安装比较慢，可以在创建好项目目录后 采用yarn和cnpm安装依赖
运行项目 cd angularDome  ng serve --open

创建组件 ng g component components/header

angular和vue一样 使用插值表达式 {{}} 来绑定业务逻辑里面定义的数据

for循环  *ngFor="let item of list;let i = index;

[hidde]传入true 或 false 可以控制显示与隐藏

array的循环遍历方法 都是异步的

每次声明一个变量或者属性 都需要配置其类型

ngAfterViewInit 声明周期钩子 dom已渲染完成 可以操作dom

angular可以通过 ViewChild 模块来获取dom元素
引入ViewChild模块 在本身ts中  在标签中加 #box 
使用ViewChild来获取的dom元素到本身的nativeElement来取

overflow-x: hidden; 可以使超出盒子x轴的隐藏 并且不带滚动条

angular动画 transform: translate(x,y)  transition: all 2s

angular的服务配置
1. ng g service services/storage
2.app.module.ts 中引入创建服务 并声明
import { StorageService } from './services/storage.service'
providers:[ StorageService ]
3.storage.service.ts 文件中定义服务
即在服务中声明 服务要执行的函数 可以在外部直接调用
在class StorageService 中配置
set（key:string,value:any）{
  value = JSON.stringify(value)
  localStorage.setItem(key,value)  
}
注意点 在获取的时候注意兼容问题
4.在组件中使用时，在组件中引入
import { StorageService } from '../../services/storage.service'
constructor(public storage:StorageService){}
然后就可以在组件的函数中使用 服务了

在ts中的变量做属性 最好都声明类型 不然会有意想不到的错误

生命周期
*****ngOnInit 和 vue created比较类似 数据初始化完成 执行 可以用来发请求（）
ngOnChanges 在父子传值时触发 首次触发一定在ngOnInit之前 ngOnInit在
ngOnChanges之后触发
*****ngAfterViewInit 可以操作dom
ngOnDestory 可以保存用户信息

@viewChild （angular的获取dom封装）
1.模板中给dom起一个名字 eg #box
2.在使用的模板中 引入 viewChild装饰器 import { ViewChild } from ‘@angular/core’
3.在类中获取dom @viewChild('myBox') myBox:any;
4.在ngAfterViewInit钩子中操作dom
this.myBox.nativeElement（这里获取的是元素本身）
5.获取组件 不需要和nativeElement配合使用 直接用this.myBox+方法
如果是获取dom 需要nativeElement配合使用

父组件给子组件传值
1.子组件可以获取父组件的数据
2.子组件可以执行父组件的方法
子组件给父组件传值
1.父组件可以获取子组件的数据
2.父组件可以获取子组件的方法
非父子组件
1.组件之间传值
2.共享方法

父组件给子组件传值
首先在父组件中传入属性 【title】='title' 
然后在子组件中引入 input 装饰器 
最后用input来接受 父组件传来的数据 @input title
【title】='title' 传数据 【run】='run' 传方法  【home】='this' 传整个父组件 
子组件给父组件传值
1.首先在子组件中引入 Output 和 EventEmitter 修饰器
2.子组件实例化 EventEmitter @Output() private outer=new EventEmitter<string>();
3.子组件通过 EventEmitter 对象 outer 实例广播数据
sendParent(){
// alert('zhixing');
this.outer.emit('msg from child')
}
4.父组件调用子组件的时候，定义接收事件 , outer 就是子组件的 EventEmitter 对象 outer
<app-header (outer)="runParent($event)"></app-header>
5.父组件接收到数据会调用自己的 runParent 方法，这个时候就能拿到子组件的数据
/接收子组件传递过来的数据
runParent(msg:string){
alert(msg);
}

angular Rxjs 的使用
1.首先配置 Rxjs服务
2.然后在服务中 引入Observable import { Observable } from 'rxjs' 
  getRxjsData(){
    return new Observable((observer)=>{
      setTimeout(()=>{
        observer.next('我是Rxjs数据')
      },3000)
    })
  }
3.采用 observe.next()来监视成功回调 observe.error()来监视失败回调
4.在组件中使用subscribe 来接受回调结果(成功和失败都会被监听) 形式类似于 then 又叫订阅
p.subscribe(res=>{console.log(res)})
5.取消订阅 d.unsubscribe（） 可以取消回调 d是p.subscribe(res=>{console.log(res)})的返回值
6.Rxjs 可以中途取消 d.unsubscribe 可以发射多个值  有各种工具函数
6.1.1使用工具函数（管道）就要引入rxjs-compat模块 然后在服务中引入 import 'rxjs/Rx'
6.1.2在使用管道的组件后者服务封装方法的时候引入Rxjs import{ mao, filter } from 'rxjs/operators'
6.1.3在p.pipe(filter(vakue)=>{return true})subscribe((data)=>{console.log(data)})
在pipe中配置管道（filter/map）管道中方法可以一起用 在filter，map就可以用两种方法啦
 data5.pipe( data5 是Rxjs实例
      filter(value=>{
      if(value % 2 === 0){
        return true
      }   
    }),
    map(value=>{
      return value*value
    })  
    ).subscribe((res)=>{
      console.log(res)
    })
  }

模块和服务的区别
模块功能复杂 服务功能单一

引入angular自带http模块(以get请求为例) 
1.在app.module.ts中 引入模块 import { HttpClientModule } from '@angular/common/http'
然后在该文件中 配置模块 imports:[ HttpClientModule]
2.在组件中 引入模块 import { HttpClient, } from '@angular/common/http'（此模块类似于服务 ）
2.1 import { HttpClient, HttpHeaders } from '@angular/common/http' (可以视情况加入模块)
3.在组件中的constructor(public http:HttpClient){} 引入模块的实例
4.this.http.get(url).subscribe(res=>{console.log(res)})

post请求 其他都与get请求一样 在组件中引入时需要加入请求头
import { HttpClient, HttpHeaders } from '@angular/common/http'
const httpOptions = {
headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};
var api = "http://127.0.0.1:3000/doLogin";
this.http.post(api,{username:'张三',age:'20'},httpOptions).subscribe(response => {
console.log(response);
});

jsonp请求（jsonp本质就是get请求）大致和get请求一致
1.在app.module.ts中引入 import { HttpClientModule, HttpClientJsonpModule } 
from '@angular/common/http'     imports:[HttpClientModule,HttpClientJsonpModule]
2.jsonp请求数据
let api = '' 
this.http.jsonp(api,'callback').subscribe(res=>{console.log(res)})

angular的路由概念
路由就是根据不同的url地址，动态的让根组件挂载其他组件 来实现一个单页面应用

1.在app-routing-module.ts中配置路由（和vue一样）
2.<router-outlet></router-outlet>路由出口
3.{ path: '**', /*任意的路由*/  /* component:HomeComponent*/ redirectTo:'home'}
兜底 通配符 放置在最后位 如果没有路由匹配上 就会自动重定向到 指定组件
4.声明式导航 <a routerLink="/home" routerLinkActive="active">首页</a>
5.激活态样式 routerLinkActive 指向被激活的类 .active类中可以写入激活状态 
6.编程式导航 
6.1在跳转的文件.ts中引入 import { Router } from '@angular/router'
constructor(public router:Router){}
6.1.1在函数中 写入 this.router.navigate(['/news/','133']) 动态路由跳转
6.2.1this.router.navigate(['/news']) 普通路由跳转
6.3.1 get传值 编程式跳转
1.在跳转的ts中引入声明模块 import { Router, NavigationExtras } from '@angular/router' 
constructor(public router:Router){}
2.在函数中写入 let queryParams:NavigationExtras ={ queryParams: {'aid': '123'} } 
3.跳转 this.router.navigate(['/news'],queryParams)

路由传值
一、get传值
1.跳转<a [routerLink]="['/news']" [queryParams]="{aid:key,name:'zs}"></a>
2.接收
在接收页ts中引入 import { ActivatedRoute } from '@angular/router'
constructor(public route:ActivatedRoute){}
this.route.queryParams.subscribe((res)=>{console.log(res)}) /*res就是传递的值
二、动态路由
1.配置 在app-routing-module.ts中配置动态路由 { path:'home/:aid',component:HomeComponent }
2.跳转 <a [routerLink]="['/home'，200]" ></a>
3.接收 import { ActivatedRoute } from '@angular/router'
constructor(public route:ActivatedRoute){}
this.route.params.subscribe((res)=>{console.log(res)}) /*res就是传递的值

三、路由嵌套
首先创建路由组件 ng g component components/home/setting
然后在app.modules.ts 设置 嵌套路由
const routes:Routes = [{ path:'home',component:HomeComponent,
children:[{path:'setting',component:SettingComponent}] }]
最后在跳转页面写 <a [routerLink="['/home/setting']"]>欢迎首页</a>

SDK就是Software Development Kit.软件开发包。
是操作系统开放出来供程序员进行软件开发的一系列工具

国泰君安安装包
ng build --prod @qiuer/core
ng build --prod @qiuer/component
ng build --prod @qiuer/chart
ng build --prod @qiuer/markdown
ng build --prod @qiuer/flow





